fn main() {
    let elf : &[u8] = &[
        // https://upload.wikimedia.org/wikipedia/commons/e/e4/ELF_Executable_and_Linkable_Format_diagram_by_Ange_Albertini.png

        // 0x0000 - elf header
        0x7F, b'E', b'L', b'F',             // EI_MAG
        0x01, 0x01,                         // EI_CLASS, EI_DATA
        0x01, 0x00, 0x00, 0x00,             // EI_VERSION
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (padding)

        0x02, 0x00,                         // e_type
        0x28, 0x00,                         // e_machine
        0x01, 0x00, 0x00, 0x00,             // e_version
        0x60, 0x00, 0x00, 0x08,             // e_entry
        0x40, 0x00, 0x00, 0x00,             // e_phoff

        0xB0, 0x00, 0x00, 0x00,             // e_shoff
        0x00, 0x00, 0x00, 0x00,             // (padding?)
        0x34, 0x00,                         // e_ehsize
        0x20, 0x00,                         // e_phentsize
        0x01, 0x00,                         // e_phnum
        0x28, 0x00,                         // e_shentsize

        0x40, 0x00,                         // e_shnum
        0x03, 0x00,                         // e_shstrndx
        0x00, 0x00, 0x00, 0x00,             // (padding)
        0x00, 0x00, 0x00, 0x00,             // (padding)
        0x00, 0x00, 0x00, 0x00,             // (padding)

        // 0x0040 - program header table
        0x01, 0x00, 0x00, 0x00,             // p_type
        0x00, 0x00, 0x00, 0x00,             // p_offset
        0x00, 0x00, 0x00, 0x08,             // p_vaddr
        0x00, 0x00, 0x00, 0x08,             // p_paddr

        0x90, 0x00, 0x00, 0x00,             // p_filesz
        0x90, 0x00, 0x00, 0x00,             // p_memsz
        0x05, 0x00, 0x00, 0x00,             // p_flags
        0x00, 0x00, 0x00, 0x00,             // (padding?)

        // 0x0060 - code
        0x0D, 0x20, 0xA0, 0xE3,             // mov r2, #13
        0x14, 0x10, 0x8F, 0xE2,             // add r1, pc, #20
        0x01, 0x00, 0xA0, 0xE3,             // mov r0, #1
        0x04, 0x70, 0xA0, 0xE3,             // mov r7, #4

        0x00, 0x00, 0x00, 0xEF,             // svc 0
        0x01, 0x00, 0xA0, 0xE3,             // mov r0, #1
        0x01, 0x70, 0xA0, 0xE3,             // mov r7, #1
        0x00, 0x00, 0x00, 0xEF,             // svc 0

        // 0x0080 - data
        0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x0A, 0x00, // "Hello, World!\n\0"
        0x00, 0x00,                                                                         // (padding)

        // 0x0090 - section names
        0x00,                                                           // "\0"
        0x2E, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00,     // ".shrtrtab\0"
        0x2E, 0x74, 0x65, 0x78, 0x74, 0x00,                             // ".text\0"
        0x2E, 0x72, 0x6F, 0x64, 0x61, 0x74, 0x61, 0x00,                 // ".rodata\0"
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                       // (padding)

        // 0x00B0 - section header table
        0x00, 0x00, 0x00, 0x00, // sh_name      "" / <null>
        0x00, 0x00, 0x00, 0x00, // sh_type      SHT_NULL
        0x00, 0x00, 0x00, 0x00, // sh_flags     0
        0x00, 0x00, 0x00, 0x00, // sh_addr      0
        0x00, 0x00, 0x00, 0x00, // sh_offset    0
        0x00, 0x00, 0x00, 0x00, // sh_size      0
        0x00, 0x00, 0x00, 0x00, // sh_link      SHN_UNDEF
        0x00, 0x00, 0x00, 0x00, // sh_info      0
        0x00, 0x00, 0x00, 0x00, // sh_addralign 0
        0x00, 0x00, 0x00, 0x00, // sh_entsize   0

        0x0B, 0x00, 0x00, 0x00, // sh_name      ".text"
        0x01, 0x00, 0x00, 0x00, // sh_type      SHT_PROGBITS
        0x06, 0x00, 0x00, 0x00, // sh_flags     SHF_ALLOC | SHF_EXECINSTR
        0x60, 0x00, 0x00, 0x08, // sh_addr      0x8000060
        0x60, 0x00, 0x00, 0x00, // sh_offset    0x60
        0x20, 0x00, 0x00, 0x00, // sh_size      0x20
        0x00, 0x00, 0x00, 0x00, // sh_link      SHN_UNDEF
        0x00, 0x00, 0x00, 0x00, // sh_info      0
        0x00, 0x00, 0x00, 0x00, // sh_addralign 0
        0x00, 0x00, 0x00, 0x00, // sh_entsize   0

        0x11, 0x00, 0x00, 0x00, // sh_name      ".rodata"
        0x01, 0x00, 0x00, 0x00, // sh_type      SHT_PROGBITS
        0x02, 0x00, 0x00, 0x00, // sh_flags     SHF_ALLOC
        0x80, 0x00, 0x00, 0x08, // sh_addr      0x8000080
        0x80, 0x00, 0x00, 0x00, // sh_offset    0x80
        0x0D, 0x00, 0x00, 0x00, // sh_size      0x0D
        0x00, 0x00, 0x00, 0x00, // sh_link      SHN_UNDEF
        0x00, 0x00, 0x00, 0x00, // sh_info      0
        0x00, 0x00, 0x00, 0x00, // sh_addralign 0
        0x00, 0x00, 0x00, 0x00, // sh_entsize   0

        0x01, 0x00, 0x00, 0x00, // sh_name      ".shrtrtab"
        0x03, 0x00, 0x00, 0x00, // sh_type      SHT_STRTAB
        0x00, 0x00, 0x00, 0x00, // sh_flags     0
        0x00, 0x00, 0x00, 0x00, // sh_addr      0
        0x90, 0x00, 0x00, 0x00, // sh_offset    0x90
        0x19, 0x00, 0x00, 0x00, // sh_size      0x19
        0x00, 0x00, 0x00, 0x00, // sh_link      SHN_UNDEF
        0x00, 0x00, 0x00, 0x00, // sh_info      0
        0x00, 0x00, 0x00, 0x00, // sh_addralign 0
        0x00, 0x00, 0x00, 0x00, // sh_entsize   0
    ];

    let (mut elf, _) = maulingmonkey_io_adapters::IntoCloneReadAtLen::into_read_at_len(elf).unwrap();
    uvm::elf32::run(&mut elf).unwrap();
}
